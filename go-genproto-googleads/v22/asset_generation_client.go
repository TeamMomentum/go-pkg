// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package googleads

import (
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	servicespb "github.com/TeamMomentum/go-pkg/go-genproto-googleads/pb/v22/services"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

var newAssetGenerationClientHook clientHook

// AssetGenerationCallOptions contains the retry settings for each method of AssetGenerationClient.
type AssetGenerationCallOptions struct {
	GenerateText   []gax.CallOption
	GenerateImages []gax.CallOption
}

func defaultAssetGenerationGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("googleads.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("googleads.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("googleads.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://googleads.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultAssetGenerationCallOptions() *AssetGenerationCallOptions {
	return &AssetGenerationCallOptions{
		GenerateText: []gax.CallOption{
			gax.WithTimeout(14400000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    5000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GenerateImages: []gax.CallOption{
			gax.WithTimeout(14400000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    5000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

// internalAssetGenerationClient is an interface that defines the methods available from Google Ads API.
type internalAssetGenerationClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GenerateText(context.Context, *servicespb.GenerateTextRequest, ...gax.CallOption) (*servicespb.GenerateTextResponse, error)
	GenerateImages(context.Context, *servicespb.GenerateImagesRequest, ...gax.CallOption) (*servicespb.GenerateImagesResponse, error)
}

// AssetGenerationClient is a client for interacting with Google Ads API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service for generating new assets with generative AI.
type AssetGenerationClient struct {
	// The internal transport-dependent client.
	internalClient internalAssetGenerationClient

	// The call options for this service.
	CallOptions *AssetGenerationCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *AssetGenerationClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *AssetGenerationClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *AssetGenerationClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GenerateText uses generative AI to generate text that can be used as assets in a
// campaign.
//
// List of thrown errors:
// AuthenticationError (at )
// AuthorizationError (at )
// AssetGenerationError (at )
// HeaderError (at )
// InternalError (at )
// QuotaError (at )
// RequestError (at )
func (c *AssetGenerationClient) GenerateText(ctx context.Context, req *servicespb.GenerateTextRequest, opts ...gax.CallOption) (*servicespb.GenerateTextResponse, error) {
	return c.internalClient.GenerateText(ctx, req, opts...)
}

// GenerateImages uses generative AI to generate images that can be used as assets in a
// campaign.
//
// List of thrown errors:
// AuthenticationError (at )
// AuthorizationError (at )
// AssetGenerationError (at )
// HeaderError (at )
// InternalError (at )
// QuotaError (at )
// RequestError (at )
func (c *AssetGenerationClient) GenerateImages(ctx context.Context, req *servicespb.GenerateImagesRequest, opts ...gax.CallOption) (*servicespb.GenerateImagesResponse, error) {
	return c.internalClient.GenerateImages(ctx, req, opts...)
}

// assetGenerationGRPCClient is a client for interacting with Google Ads API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type assetGenerationGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing AssetGenerationClient
	CallOptions **AssetGenerationCallOptions

	// The gRPC API client.
	assetGenerationClient servicespb.AssetGenerationServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewAssetGenerationClient creates a new asset generation service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service for generating new assets with generative AI.
func NewAssetGenerationClient(ctx context.Context, opts ...option.ClientOption) (*AssetGenerationClient, error) {
	clientOpts := defaultAssetGenerationGRPCClientOptions()
	if newAssetGenerationClientHook != nil {
		hookOpts, err := newAssetGenerationClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := AssetGenerationClient{CallOptions: defaultAssetGenerationCallOptions()}

	c := &assetGenerationGRPCClient{
		connPool:              connPool,
		assetGenerationClient: servicespb.NewAssetGenerationServiceClient(connPool),
		CallOptions:           &client.CallOptions,
		logger:                internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *assetGenerationGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *assetGenerationGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *assetGenerationGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *assetGenerationGRPCClient) GenerateText(ctx context.Context, req *servicespb.GenerateTextRequest, opts ...gax.CallOption) (*servicespb.GenerateTextResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "customer_id", url.QueryEscape(req.GetCustomerId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GenerateText[0:len((*c.CallOptions).GenerateText):len((*c.CallOptions).GenerateText)], opts...)
	var resp *servicespb.GenerateTextResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.assetGenerationClient.GenerateText, req, settings.GRPC, c.logger, "GenerateText")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *assetGenerationGRPCClient) GenerateImages(ctx context.Context, req *servicespb.GenerateImagesRequest, opts ...gax.CallOption) (*servicespb.GenerateImagesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "customer_id", url.QueryEscape(req.GetCustomerId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GenerateImages[0:len((*c.CallOptions).GenerateImages):len((*c.CallOptions).GenerateImages)], opts...)
	var resp *servicespb.GenerateImagesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.assetGenerationClient.GenerateImages, req, settings.GRPC, c.logger, "GenerateImages")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
